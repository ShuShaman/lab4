после
void PrintUserInfo(decimal amount)
 {
 PrintParentInfo(); PrintUserDetails(decimal amount); 
} 
void PrintUserDetails(decimal amount)
 { 
Console.WriteLine(string.Format("имя: {0}", name); Console.WriteLine(string.Format("возраст: {0}", age); Console.WriteLine(string.Format("кол-во: {0}", amount);
}
после
int GetPoints()
 {
 return summ >= maxSumm ? decimal.One : decimal.Zero;
 }
после 
return order.GetCost() > 1000;
после (преобразуем выражение в метод)
decimal MethodA()
 {
 decimal summ = GetSumm();
 if(summ > 1000)
 {
 //do something return summ * 10;
 }
 return 0;
 } 
decimal MethodB()
 {
 //do something return GetSumm() != 0 ? GetSumm() * 100 : 1;
 }
 decimal GetSumm() 
{
 return amount * cost;
 }
после 
int Discount(int amount, bool useDefaultDiscount, DateTime date)
 {
 int result = amount; 
if(amount == 0 && useDefaultDiscount)
 {
 result = 10;
 }
 return result;
 }
после (помещаем результат выражения или его части во временную переменную)
bool isLastFocusedColumn = VisualItems.ColumnCount == FocusedCell.X;
 bool altShiftPressed = (key == Keys.Alt | Keys.Shift);
 bool wasResized = resize > 0;
 if(isLastFocusedColumn && altShiftPressed && WasInitialized() && wasResized)
 { 
// do something 
}
после (Выделяем методы из условия, части «then» и частей «else»)
if (notSu'mmer(date)) charge = winterCharge(quantity); 
else charge = summerCharge (quantity);
после 
if (isSpecialDealO) total = price * 0 95 else total = price * 0 98, send()
после 
double disabilityAmount()
 { 
if (isNotEligibleForDisabilityO) return 0 // вычислить сумму оплаты по нетрудоспособности
после
void checkSecunty(String[] people) 
{
 boolean found = false for (int i=0 l < people length i++) { if (' found) { if (people[i] equals ( Don ))
{
 sendAlert() break > if (people[i] equals ( John ))
{ 
sendAlertO found = true } } } }
после
class Animal
{
public:
	virtual void vote();
	void getStatus();
	
private:
	std::string status_;
}

class Dog : public Animal
{
public:
	void vote() override;
	void getStatus() override;
}

class Bird : public Animal
{
public:
	void vote() override;
	void getStatus() override;
}
после 
class Unit
{
public:
	...
	
private:
	...
}

class Solider : public Unit
{
	...
}

class Tank : public Unit
{
public:
	void getFuel();

private:
	int fuel_;
}
